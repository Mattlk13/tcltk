# Test the "tk::choosefont" command
#
# Copyright (c) 2008 Pat Thoyts
#
# RCS: @(#) $Id$
#

package require tcltest 2.1
eval tcltest::configure $argv
tcltest::loadTestedCommands

# the following helper functions are related to the functions used
# in winDialog.test where they are used to send messages to the win32
# dialog (hence the wierdness).

testConstraint scriptImpl [llength [info proc ::tk::choosefont::Configure]]

proc start {cmd} {
    set ::tk_dialog {}
    set ::iter_after 0
    after 1 $cmd
}
proc then {cmd} {
    set ::command $cmd
    set ::dialogresult {}
    set ::testfont {}
    afterbody
    vwait ::dialogresult
    return $::dialogresult
}
proc afterbody {} {
    if {$::tk_dialog == {}} {
        if {[incr ::iter_after] > 30} {
            set ::dialogresult ">30 iterations waiting for tk_dialog"
            return
        }
        after 150 {afterbody}
        return
    }
    uplevel #0 {set dialogresult [eval $command]}
}
proc Click {button} {
    switch -exact -- $button {
        ok { $::tk_dialog.ok invoke }
        cancel { $::tk_dialog.cancel invoke }
        apply { $::tk_dialog.apply invoke }
        default { return -code error "invalid button name \"$button\"" }
    }
}
proc ApplyFont {font} {
    puts stderr "apply: $font"
    set ::testfont $font
}

# -------------------------------------------------------------------------

test fontdlg-1.1 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont -z
} -result {unknown or ambiguous subcommand "-z": must be configure, hide, or show}

test fontdlg-1.2 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -z
} -match glob -result {bad option "-z":*}

test fontdlg-1.3 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -parent . -font
} -result {value for "-font" missing}

test fontdlg-1.4 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -parent . -title
} -result {value for "-title" missing}

test fontdlg-1.5 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -parent . -command
} -result {value for "-command" missing}

test fontdlg-1.6 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -title . -parent
} -result {value for "-parent" missing}

test fontdlg-1.7 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -parent abc
} -result {bad window path name "abc"}

test fontdlg-1.8 {tk::choosefont: usage} -returnCodes ok -body {
    tk::choosefont configure -visible
} -result {0}

test fontdlg-1.9 {tk::choosefont: usage} -returnCodes error -body {
    tk::choosefont configure -visible 1
} -match glob -result {*}

# -------------------------------------------------------------------------
# By explicitly calling the tk internal command we always test the script
# implementation here even when the current platform defines a native
# font dialog. This is intentional in this test file.

test fontdlg-2.0 {choosefont -title} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -title "Hello"
        tk::choosefont show
    }
    then {
        set x [wm title $::tk_dialog]
        Click cancel
    }
    set x
} -result {Hello}

test fontdlg-2.1 {choosefont -title (cyrillic)} -constraints scriptImpl -body {
    start {
        tk::choosefont configure \
            -title "\u041f\u0440\u0438\u0432\u0435\u0442"
        tk::choosefont show
    }
    then {
        set x [wm title $::tk_dialog]
        Click cancel
    }
    set x
} -result "\u041f\u0440\u0438\u0432\u0435\u0442"

test fontdlg-3.0 {choosefont -parent} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -parent .
        tk::choosefont show
    }
    then {
        set x [winfo parent $::tk_dialog]
        Click cancel
    }
    set x
} -result {.}

test fontdlg-3.1 {choosefont -parent (invalid)} -body {
    tk::choosefont configure -parent junk
} -returnCodes error -match glob -result {bad window path *}

test fontdlg-4.0 {choosefont -font} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -command ApplyFont -font courier
        tk::choosefont show
    }
    then {
        Click cancel
    }
    set ::testfont
} -result {}

test fontdlg-4.1 {choosefont -font} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -command ApplyFont -font courier
        tk::choosefont show
    }
    then {
        Click ok
    }
    expr {$::testfont ne {}}
} -result {1}

test fontdlg-4.2 {choosefont -font} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -command ApplyFont -font TkDefaultFont
        tk::choosefont show
    }
    then {
        Click ok
    }
    expr {$::testfont ne {}}
} -result {1}

test fontdlg-4.3 {choosefont -font} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -command ApplyFont -font {times 14 bold}
        tk::choosefont show
    }
    then {
        Click ok
    }
    expr {$::testfont ne {}}
} -result {1}

test fontdlg-4.4 {choosefont -font} -constraints scriptImpl -body {
    start {
        tk::choosefont configure -command ApplyFont -font {times 14 bold}
        tk::choosefont show
    }
    then {
        Click ok
    }
    lrange $::testfont 1 end
} -result {14 bold}

# -------------------------------------------------------------------------

cleanupTests
return

# Local Variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
